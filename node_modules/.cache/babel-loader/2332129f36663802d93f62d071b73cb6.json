{"ast":null,"code":"var _jsxFileName = \"/Users/hantaoliu/Projects/Learning-Platform/techleak/client/src/components/userProfile/userProfileComponent/simplifedPosts.jsx\";\nimport React from \"react\";\nimport axios from \"axios\";\nimport { connect } from \"react-redux\";\nimport SimplifiedPost from \"./simplifiedPost\";\nimport { stat } from \"fs\";\n\nvar faker = require(\"faker\");\n\nclass SimplifiedPosts extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      likedPostsDetail: this.props.likedPostsDetail,\n      myPostsDetail: this.props.myPostsDetail,\n      likedPosts: this.props.likedPosts,\n      myPosts: this.props.myPosts\n    }; // this.retrievePosts(this.props.PostType);\n\n    this.handleCancelClick = this.handleCancelClick.bind(this);\n  }\n\n  handleAdjustLikedPost(id, status) {\n    // retrieve the post id that has been deleted by the original aurthor\n    // to update a user's likedposts in database and redux\n    const token = localStorage.getItem(\"token\");\n    const headers = {\n      headers: {\n        \"Content-Type\": \"application/json\",\n        Authorization: \"Token \".concat(token),\n        withCredentials: true\n      }\n    };\n\n    if (status == 400) {\n      axios.delete(\"\".concat(process.env.REACT_APP_BACKEND_SERVER, \"/api/users/likes/\").concat(this.props.userID, \"?postID=\").concat(id), headers).then(res => {\n        this.props.handleUpdatedLikedPosts(res.data.likedPosts);\n      }).catch(err => console.log(err));\n    }\n  } // this method updates the local state and the redux of my posts and liked posts\n  // when a deleted button was clicked.\n\n\n  handleCancelClick(e, objectID, PostType) {\n    e.preventDefault();\n\n    if (PostType === \"MyLikes\") {\n      const updatedLikedPostsDetail = this.state.likedPostsDetail.filter(function (lPostDetail) {\n        return lPostDetail._id != objectID;\n      });\n      const updatedLikedPosts = this.state.likedPosts.filter(likedPost => {\n        return likedPost !== objectID;\n      }); // this portion update the local state (by using setState) to achieve new rendering\n\n      this.setState({\n        likedPostsDetail: updatedLikedPostsDetail,\n        likedPosts: updatedLikedPosts\n      }); // this portion update the redux to finalize the delete\n\n      this.props.handleUpdatedLikedPosts(updatedLikedPostsDetail, updatedLikedPosts);\n    }\n\n    if (PostType === \"MyPosts\") {\n      const updatedMyPostsDetail = this.state.myPostsDetail.filter(function (mPostDetail) {\n        return mPostDetail._id != objectID;\n      });\n      const updatedMyPosts = this.state.myPosts.filter(myPost => {\n        return myPost !== objectID;\n      }); // this portion update the local state (by using setState) to achieve new rendering\n\n      this.setState({\n        myPostsDetail: updatedMyPostsDetail,\n        myPosts: updatedMyPosts\n      }); // this portion update the redux to finalize the delete\n\n      this.props.handleUpdatedMyPosts(updatedMyPostsDetail, updatedMyPosts);\n    }\n  }\n\n  render() {\n    let PostType = this.props.PostType;\n    let _this$state = this.state,\n        likedPostsDetail = _this$state.likedPostsDetail,\n        myPostsDetail = _this$state.myPostsDetail;\n    var simpPosts = [];\n\n    if (PostType === \"MyLikes\") {\n      simpPosts = likedPostsDetail;\n    } else if (PostType === \"MyPosts\") {\n      simpPosts = myPostsDetail;\n    }\n\n    return React.createElement(React.Fragment, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 96\n      },\n      __self: this\n    }, simpPosts.map(simPost => {\n      return React.createElement(SimplifiedPost, {\n        title: simPost.title,\n        views: faker.random.number(),\n        comments: simPost.comments,\n        tags: simPost.tags,\n        img: this.props.avatar || \"https://bulma.io/images/placeholders/128x128.png\",\n        objectID: simPost._id,\n        handleCancelClick: this.handleCancelClick,\n        PostType: PostType,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 99\n        },\n        __self: this\n      });\n    }).reverse());\n  }\n\n}\n\nconst mapStateToProps = state => {\n  return {\n    userID: state.persistedReducer.userID,\n    loggedIn: state.persistedReducer.loggedIn,\n    likedPosts: state.persistedReducer.likedPosts,\n    myPosts: state.persistedReducer.myPosts,\n    avatar: state.persistedReducer.avatar,\n    likedPostsDetail: state.persistedReducer.likedPostsDetail,\n    myPostsDetail: state.persistedReducer.myPostsDetail\n  };\n};\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    handleUpdatedLikedPosts: (updatedLikedPostsDetail, updatedLikedPosts) => dispatch({\n      type: \"USERLIKEDPOSTSUPDATED\",\n      likedPostsDetail: updatedLikedPostsDetail,\n      likedPosts: updatedLikedPosts\n    }),\n    handleUpdatedMyPosts: (updatedMyPostsDetail, updatedMyPosts) => dispatch({\n      type: \"USERMYPOSTSUPDATED\",\n      myPostsDetail: updatedMyPostsDetail,\n      myPosts: updatedMyPosts\n    })\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(SimplifiedPosts);","map":{"version":3,"sources":["/Users/hantaoliu/Projects/Learning-Platform/techleak/client/src/components/userProfile/userProfileComponent/simplifedPosts.jsx"],"names":["React","axios","connect","SimplifiedPost","stat","faker","require","SimplifiedPosts","Component","constructor","props","state","likedPostsDetail","myPostsDetail","likedPosts","myPosts","handleCancelClick","bind","handleAdjustLikedPost","id","status","token","localStorage","getItem","headers","Authorization","withCredentials","delete","process","env","REACT_APP_BACKEND_SERVER","userID","then","res","handleUpdatedLikedPosts","data","catch","err","console","log","e","objectID","PostType","preventDefault","updatedLikedPostsDetail","filter","lPostDetail","_id","updatedLikedPosts","likedPost","setState","updatedMyPostsDetail","mPostDetail","updatedMyPosts","myPost","handleUpdatedMyPosts","render","simpPosts","map","simPost","title","random","number","comments","tags","avatar","reverse","mapStateToProps","persistedReducer","loggedIn","mapDispatchToProps","dispatch","type"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport axios from \"axios\";\nimport { connect } from \"react-redux\";\nimport SimplifiedPost from \"./simplifiedPost\";\nimport { stat } from \"fs\";\n\nvar faker = require(\"faker\");\n\nclass SimplifiedPosts extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      likedPostsDetail: this.props.likedPostsDetail,\n      myPostsDetail: this.props.myPostsDetail,\n      likedPosts: this.props.likedPosts,\n      myPosts: this.props.myPosts\n    };\n    // this.retrievePosts(this.props.PostType);\n    this.handleCancelClick = this.handleCancelClick.bind(this);\n  }\n\n  handleAdjustLikedPost(id, status) {\n    // retrieve the post id that has been deleted by the original aurthor\n    // to update a user's likedposts in database and redux\n    const token = localStorage.getItem(\"token\");\n    const headers = {\n      headers: {\n        \"Content-Type\": \"application/json\",\n        Authorization: `Token ${token}`,\n        withCredentials: true\n      }\n    };\n    if (status == 400) {\n      axios\n        .delete(\n          `${process.env.REACT_APP_BACKEND_SERVER}/api/users/likes/${\n          this.props.userID\n          }?postID=${id}`,\n          headers\n        )\n        .then(res => {\n          this.props.handleUpdatedLikedPosts(res.data.likedPosts);\n        })\n        .catch(err => console.log(err));\n    }\n  }\n\n  // this method updates the local state and the redux of my posts and liked posts\n  // when a deleted button was clicked.\n  handleCancelClick(e, objectID, PostType) {\n    e.preventDefault();\n\n    if (PostType === \"MyLikes\") {\n      const updatedLikedPostsDetail = this.state.likedPostsDetail.filter(function (lPostDetail) {\n        return lPostDetail._id != objectID;\n      })\n      const updatedLikedPosts = this.state.likedPosts.filter(likedPost => {\n        return likedPost !== objectID;\n      });\n      // this portion update the local state (by using setState) to achieve new rendering\n      this.setState({\n        likedPostsDetail: updatedLikedPostsDetail,\n        likedPosts: updatedLikedPosts\n      })\n      // this portion update the redux to finalize the delete\n      this.props.handleUpdatedLikedPosts(updatedLikedPostsDetail, updatedLikedPosts);\n    }\n\n    if (PostType === \"MyPosts\") {\n      const updatedMyPostsDetail = this.state.myPostsDetail.filter(function (mPostDetail) {\n        return mPostDetail._id != objectID;\n      })\n      const updatedMyPosts = this.state.myPosts.filter(myPost => {\n        return myPost !== objectID;\n      });\n      // this portion update the local state (by using setState) to achieve new rendering\n      this.setState({\n        myPostsDetail: updatedMyPostsDetail,\n        myPosts: updatedMyPosts\n      })\n      // this portion update the redux to finalize the delete\n      this.props.handleUpdatedMyPosts(updatedMyPostsDetail, updatedMyPosts);\n    }\n  }\n\n  render() {\n    let { PostType } = this.props;\n    let { likedPostsDetail, myPostsDetail } = this.state;\n    var simpPosts = [];\n    if (PostType === \"MyLikes\") {\n      simpPosts = likedPostsDetail;\n    } else if (PostType === \"MyPosts\") {\n      simpPosts = myPostsDetail;\n    }\n    return (\n      <React.Fragment>\n        {simpPosts.map(simPost => {\n          return (\n            <SimplifiedPost\n              title={simPost.title}\n              views={faker.random.number()}\n              comments={simPost.comments}\n              tags={simPost.tags}\n              img={\n                this.props.avatar ||\n                \"https://bulma.io/images/placeholders/128x128.png\"\n              }\n              objectID={simPost._id}\n              handleCancelClick={this.handleCancelClick}\n              PostType={PostType}\n            />\n          );\n        }).reverse()}\n      </React.Fragment>\n    );\n  }\n}\n\nconst mapStateToProps = state => {\n  return {\n    userID: state.persistedReducer.userID,\n    loggedIn: state.persistedReducer.loggedIn,\n    likedPosts: state.persistedReducer.likedPosts,\n    myPosts: state.persistedReducer.myPosts,\n    avatar: state.persistedReducer.avatar,\n    likedPostsDetail: state.persistedReducer.likedPostsDetail,\n    myPostsDetail: state.persistedReducer.myPostsDetail\n  };\n};\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    handleUpdatedLikedPosts: (updatedLikedPostsDetail, updatedLikedPosts) =>\n      dispatch({\n        type: \"USERLIKEDPOSTSUPDATED\",\n        likedPostsDetail: updatedLikedPostsDetail,\n        likedPosts: updatedLikedPosts\n      }),\n    handleUpdatedMyPosts: (updatedMyPostsDetail, updatedMyPosts) =>\n      dispatch({\n        type: \"USERMYPOSTSUPDATED\",\n        myPostsDetail: updatedMyPostsDetail,\n        myPosts: updatedMyPosts\n      })\n  };\n};\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(SimplifiedPosts);\n"]},"metadata":{},"sourceType":"module"}