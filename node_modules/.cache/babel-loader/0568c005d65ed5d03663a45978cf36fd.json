{"ast":null,"code":"import _toConsumableArray from \"@babel/runtime/helpers/esm/toConsumableArray\";\nimport createConnector from '../core/createConnector';\nimport { getResults, getIndexId, hasMultipleIndices } from '../core/indexUtils'; // A context rule must consist only of alphanumeric characters, hyphens, and underscores.\n// See https://www.algolia.com/doc/guides/managing-results/refine-results/merchandising-and-promoting/in-depth/implementing-query-rules/#context\n\nfunction escapeRuleContext(ruleName) {\n  return ruleName.replace(/[^a-z0-9-_]+/gi, '_');\n}\n\nfunction getWidgetRefinements(attribute, widgetKey, searchState) {\n  var widgetState = searchState[widgetKey];\n\n  switch (widgetKey) {\n    case 'range':\n      return Object.keys(widgetState[attribute]).map(function (rangeKey) {\n        return widgetState[attribute][rangeKey];\n      });\n\n    case 'refinementList':\n      return widgetState[attribute];\n\n    case 'hierarchicalMenu':\n      return [widgetState[attribute]];\n\n    case 'menu':\n      return [widgetState[attribute]];\n\n    case 'multiRange':\n      return widgetState[attribute].split(':');\n\n    case 'toggle':\n      return [widgetState[attribute]];\n\n    default:\n      return [];\n  }\n}\n\nfunction getRefinements(attribute) {\n  var searchState = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  var refinements = Object.keys(searchState).filter(function (widgetKey) {\n    return searchState[widgetKey] !== undefined && searchState[widgetKey][attribute] !== undefined;\n  }).map(function (widgetKey) {\n    return getWidgetRefinements(attribute, widgetKey, searchState);\n  }).reduce(function (acc, current) {\n    return acc.concat(current);\n  }, []); // flatten the refinements\n\n  return refinements;\n}\n\nfunction getRuleContextsFromTrackedFilters(_ref) {\n  var searchState = _ref.searchState,\n      trackedFilters = _ref.trackedFilters;\n  var ruleContexts = Object.keys(trackedFilters).reduce(function (facets, facetName) {\n    var facetRefinements = getRefinements(facetName, searchState);\n    var getTrackedFacetValues = trackedFilters[facetName];\n    var trackedFacetValues = getTrackedFacetValues(facetRefinements);\n    return [].concat(_toConsumableArray(facets), _toConsumableArray(facetRefinements.filter(function (facetRefinement) {\n      return trackedFacetValues.includes(facetRefinement);\n    }).map(function (facetValue) {\n      return escapeRuleContext(\"ais-\".concat(facetName, \"-\").concat(facetValue));\n    })));\n  }, []);\n  return ruleContexts;\n}\n\nexport default createConnector({\n  displayName: 'AlgoliaQueryRules',\n  defaultProps: {\n    transformItems: function transformItems(items) {\n      return items;\n    },\n    transformRuleContexts: function transformRuleContexts(ruleContexts) {\n      return ruleContexts;\n    },\n    trackedFilters: {}\n  },\n  getProvidedProps: function getProvidedProps(props, _1, searchResults) {\n    var results = getResults(searchResults, this.context);\n\n    if (results === null) {\n      return {\n        items: [],\n        canRefine: false\n      };\n    }\n\n    var _results$userData = results.userData,\n        userData = _results$userData === void 0 ? [] : _results$userData;\n    var transformItems = props.transformItems;\n    var transformedItems = transformItems(userData);\n    return {\n      items: transformedItems,\n      canRefine: transformedItems.length > 0\n    };\n  },\n  getSearchParameters: function getSearchParameters(searchParameters, props, searchState) {\n    if (Object.keys(props.trackedFilters).length === 0) {\n      return searchParameters;\n    }\n\n    var indexSearchState = hasMultipleIndices(this.context) ? searchState.indices[getIndexId(this.context)] : searchState;\n    var newRuleContexts = getRuleContextsFromTrackedFilters({\n      searchState: indexSearchState,\n      trackedFilters: props.trackedFilters\n    });\n    var initialRuleContexts = searchParameters.ruleContexts || [];\n    var nextRuleContexts = [].concat(_toConsumableArray(initialRuleContexts), _toConsumableArray(newRuleContexts));\n\n    if (process.env.NODE_ENV === 'development') {\n      if (nextRuleContexts.length > 10) {\n        // tslint:disable-next-line:no-console\n        console.warn(\"The maximum number of `ruleContexts` is 10. They have been sliced to that limit.\\nConsider using `transformRuleContexts` to minimize the number of rules sent to Algolia.\");\n      }\n    }\n\n    var ruleContexts = props.transformRuleContexts(nextRuleContexts).slice(0, 10);\n    return searchParameters.setQueryParameter('ruleContexts', ruleContexts);\n  }\n});","map":null,"metadata":{},"sourceType":"module"}