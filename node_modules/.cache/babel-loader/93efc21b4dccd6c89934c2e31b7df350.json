{"ast":null,"code":"var _jsxFileName = \"/Users/hantaoliu/Projects/Learning-Platform/techleak/client/src/components/userProfile/userProfileComponent/simplifedPosts.jsx\";\nimport React from \"react\";\nimport axios from \"axios\";\nimport { connect } from \"react-redux\";\nimport SimplifiedPost from \"./simplifiedPost\";\nimport { stat } from \"fs\";\n\nvar faker = require(\"faker\");\n\nclass SimplifiedPosts extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      likedPostsDetail: this.props.likedPostsDetail,\n      myPostsDetail: this.props.myPostsDetail,\n      likedPosts: this.props.likedPosts,\n      myPosts: this.props.myPosts,\n      filterPosts: this.props.filterPosts\n    };\n    this.handleCancelClick = this.handleCancelClick.bind(this); // let redux know which post tab the user is looking at\n\n    this.props.handlePostType(this.props.postType);\n  }\n\n  handleAdjustLikedPost(id, status) {\n    // retrieve the post id that has been deleted by the original aurthor\n    // to update a user's likedposts in database and redux\n    const token = localStorage.getItem(\"token\");\n    const headers = {\n      headers: {\n        \"Content-Type\": \"application/json\",\n        Authorization: \"Token \".concat(token),\n        withCredentials: true\n      }\n    };\n\n    if (status == 400) {\n      axios.delete(\"\".concat(process.env.REACT_APP_BACKEND_SERVER, \"/api/users/likes/\").concat(this.props.userID, \"?postID=\").concat(id), headers).then(res => {\n        this.props.handleUpdatedLikedPosts(res.data.likedPosts);\n      }).catch(err => console.log(err));\n    }\n  }\n\n  componentDidUpdate(prevProps) {\n    console.log(this.props.filterPosts);\n\n    if (this.props.filterPosts.length !== prevProps.filterPosts.length) {\n      if (this.props.postType === \"MyLikes\") {\n        this.setState({\n          likedPostsDetail: this.props.filterPosts\n        });\n      } else if (this.props.postType === \"MyPosts\") {\n        this.setState({\n          myPostsDetail: this.props.filterPosts\n        });\n      }\n    }\n  } // this method updates the local state and the redux of my posts and liked posts\n  // when a deleted button was clicked.\n\n\n  handleCancelClick(e, objectID, postType) {\n    e.preventDefault();\n\n    if (postType === \"MyLikes\") {\n      // \"deleting\" a post should always act upon the \"unchangeable props\" instead of state\n      const updatedLikedPostsDetail = this.props.likedPostsDetail.filter(function (lPostDetail) {\n        return lPostDetail._id != objectID;\n      });\n      const updatedLikedPosts = this.props.likedPosts.filter(likedPost => {\n        return likedPost !== objectID;\n      }); // the state and the props may have different value because of the filter\n\n      const updatedLikedPostsDetailState = this.state.likedPostsDetail.filter(function (lPostDetail) {\n        return lPostDetail._id != objectID;\n      });\n      const updatedLikedPostsState = this.state.likedPosts.filter(likedPost => {\n        return likedPost !== objectID;\n      }); // this portion update the local state (by using setState) to achieve new rendering\n\n      this.setState({\n        likedPostsDetail: updatedLikedPostsDetailState,\n        likedPosts: updatedLikedPostsState\n      }); // this portion update the redux to finalize the delete\n\n      this.props.handleUpdatedLikedPosts(updatedLikedPostsDetail, updatedLikedPosts);\n    }\n\n    if (postType === \"MyPosts\") {\n      // \"deleting\" a post should always act upon the \"unchangeable props\" instead of state\n      const updatedMyPostsDetail = this.props.myPostsDetail.filter(function (mPostDetail) {\n        return mPostDetail._id != objectID;\n      });\n      const updatedMyPosts = this.props.myPosts.filter(myPost => {\n        return myPost !== objectID;\n      }); // the state and the props may have different value because of the filter\n\n      const updatedMyPostsDetailState = this.state.myPostsDetail.filter(function (mPostDetail) {\n        return mPostDetail._id != objectID;\n      });\n      const updatedMyPostsState = this.state.myPosts.filter(myPost => {\n        return myPost !== objectID;\n      }); // this portion update the local state (by using setState) to achieve new rendering\n\n      this.setState({\n        myPostsDetail: updatedMyPostsDetailState,\n        myPosts: updatedMyPostsState\n      }); // this portion update the redux to finalize the delete\n\n      this.props.handleUpdatedMyPosts(updatedMyPostsDetail, updatedMyPosts);\n    }\n  }\n\n  render() {\n    let postType = this.props.postType;\n    let _this$state = this.state,\n        likedPostsDetail = _this$state.likedPostsDetail,\n        myPostsDetail = _this$state.myPostsDetail;\n    var simpPosts = [];\n\n    if (postType === \"MyLikes\") {\n      simpPosts = likedPostsDetail;\n    } else if (postType === \"MyPosts\") {\n      simpPosts = myPostsDetail;\n    }\n\n    return React.createElement(React.Fragment, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 140\n      },\n      __self: this\n    }, simpPosts.map(simPost => {\n      return React.createElement(SimplifiedPost, {\n        title: simPost.title,\n        views: faker.random.number(),\n        comments: simPost.comments,\n        tags: simPost.tags,\n        img: simPost.avatar || \"https://bulma.io/images/placeholders/128x128.png\",\n        objectID: simPost._id,\n        handleCancelClick: this.handleCancelClick,\n        postType: postType,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 144\n        },\n        __self: this\n      });\n    }).reverse());\n  }\n\n}\n\nconst mapStateToProps = state => {\n  return {\n    userID: state.persistedReducer.userID,\n    loggedIn: state.persistedReducer.loggedIn,\n    likedPosts: state.persistedReducer.likedPosts,\n    myPosts: state.persistedReducer.myPosts,\n    avatar: state.persistedReducer.avatar,\n    likedPostsDetail: state.persistedReducer.likedPostsDetail,\n    myPostsDetail: state.persistedReducer.myPostsDetail,\n    filterPosts: state.persistedReducer.filterPosts\n  };\n};\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    handleUpdatedLikedPosts: (updatedLikedPostsDetail, updatedLikedPosts) => dispatch({\n      type: \"USERLIKEDPOSTSUPDATED\",\n      likedPostsDetail: updatedLikedPostsDetail,\n      likedPosts: updatedLikedPosts\n    }),\n    handleUpdatedMyPosts: (updatedMyPostsDetail, updatedMyPosts) => dispatch({\n      type: \"USERMYPOSTSUPDATED\",\n      myPostsDetail: updatedMyPostsDetail,\n      myPosts: updatedMyPosts\n    }),\n    handlePostType: postType => dispatch({\n      type: \"UPDATEPOSTTYPE\",\n      postType: postType\n    })\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(SimplifiedPosts);","map":{"version":3,"sources":["/Users/hantaoliu/Projects/Learning-Platform/techleak/client/src/components/userProfile/userProfileComponent/simplifedPosts.jsx"],"names":["React","axios","connect","SimplifiedPost","stat","faker","require","SimplifiedPosts","Component","constructor","props","state","likedPostsDetail","myPostsDetail","likedPosts","myPosts","filterPosts","handleCancelClick","bind","handlePostType","postType","handleAdjustLikedPost","id","status","token","localStorage","getItem","headers","Authorization","withCredentials","delete","process","env","REACT_APP_BACKEND_SERVER","userID","then","res","handleUpdatedLikedPosts","data","catch","err","console","log","componentDidUpdate","prevProps","length","setState","e","objectID","preventDefault","updatedLikedPostsDetail","filter","lPostDetail","_id","updatedLikedPosts","likedPost","updatedLikedPostsDetailState","updatedLikedPostsState","updatedMyPostsDetail","mPostDetail","updatedMyPosts","myPost","updatedMyPostsDetailState","updatedMyPostsState","handleUpdatedMyPosts","render","simpPosts","map","simPost","title","random","number","comments","tags","avatar","reverse","mapStateToProps","persistedReducer","loggedIn","mapDispatchToProps","dispatch","type"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport axios from \"axios\";\nimport { connect } from \"react-redux\";\nimport SimplifiedPost from \"./simplifiedPost\";\nimport { stat } from \"fs\";\n\nvar faker = require(\"faker\");\n\nclass SimplifiedPosts extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      likedPostsDetail: this.props.likedPostsDetail,\n      myPostsDetail: this.props.myPostsDetail,\n      likedPosts: this.props.likedPosts,\n      myPosts: this.props.myPosts,\n      filterPosts: this.props.filterPosts\n    };\n    this.handleCancelClick = this.handleCancelClick.bind(this);\n    // let redux know which post tab the user is looking at\n    this.props.handlePostType(this.props.postType);\n  }\n\n  handleAdjustLikedPost(id, status) {\n    // retrieve the post id that has been deleted by the original aurthor\n    // to update a user's likedposts in database and redux\n    const token = localStorage.getItem(\"token\");\n    const headers = {\n      headers: {\n        \"Content-Type\": \"application/json\",\n        Authorization: `Token ${token}`,\n        withCredentials: true\n      }\n    };\n    if (status == 400) {\n      axios\n        .delete(\n          `${process.env.REACT_APP_BACKEND_SERVER}/api/users/likes/${\n            this.props.userID\n          }?postID=${id}`,\n          headers\n        )\n        .then(res => {\n          this.props.handleUpdatedLikedPosts(res.data.likedPosts);\n        })\n        .catch(err => console.log(err));\n    }\n  }\n\n  componentDidUpdate(prevProps) {\n    console.log(this.props.filterPosts);\n    if (this.props.filterPosts.length !== prevProps.filterPosts.length) {\n      if (this.props.postType === \"MyLikes\") {\n        this.setState({\n          likedPostsDetail: this.props.filterPosts\n        });\n      } else if (this.props.postType === \"MyPosts\") {\n        this.setState({\n          myPostsDetail: this.props.filterPosts\n        });\n      }\n    }\n  }\n\n  // this method updates the local state and the redux of my posts and liked posts\n  // when a deleted button was clicked.\n  handleCancelClick(e, objectID, postType) {\n    e.preventDefault();\n\n    if (postType === \"MyLikes\") {\n      // \"deleting\" a post should always act upon the \"unchangeable props\" instead of state\n      const updatedLikedPostsDetail = this.props.likedPostsDetail.filter(\n        function(lPostDetail) {\n          return lPostDetail._id != objectID;\n        }\n      );\n      const updatedLikedPosts = this.props.likedPosts.filter(likedPost => {\n        return likedPost !== objectID;\n      });\n      // the state and the props may have different value because of the filter\n      const updatedLikedPostsDetailState = this.state.likedPostsDetail.filter(\n        function(lPostDetail) {\n          return lPostDetail._id != objectID;\n        }\n      );\n      const updatedLikedPostsState = this.state.likedPosts.filter(likedPost => {\n        return likedPost !== objectID;\n      });\n      // this portion update the local state (by using setState) to achieve new rendering\n      this.setState({\n        likedPostsDetail: updatedLikedPostsDetailState,\n        likedPosts: updatedLikedPostsState\n      });\n      // this portion update the redux to finalize the delete\n      this.props.handleUpdatedLikedPosts(\n        updatedLikedPostsDetail,\n        updatedLikedPosts\n      );\n    }\n\n    if (postType === \"MyPosts\") {\n      // \"deleting\" a post should always act upon the \"unchangeable props\" instead of state\n      const updatedMyPostsDetail = this.props.myPostsDetail.filter(function(\n        mPostDetail\n      ) {\n        return mPostDetail._id != objectID;\n      });\n      const updatedMyPosts = this.props.myPosts.filter(myPost => {\n        return myPost !== objectID;\n      });\n      // the state and the props may have different value because of the filter\n      const updatedMyPostsDetailState = this.state.myPostsDetail.filter(\n        function(mPostDetail) {\n          return mPostDetail._id != objectID;\n        }\n      );\n      const updatedMyPostsState = this.state.myPosts.filter(myPost => {\n        return myPost !== objectID;\n      });\n      // this portion update the local state (by using setState) to achieve new rendering\n      this.setState({\n        myPostsDetail: updatedMyPostsDetailState,\n        myPosts: updatedMyPostsState\n      });\n      // this portion update the redux to finalize the delete\n      this.props.handleUpdatedMyPosts(updatedMyPostsDetail, updatedMyPosts);\n    }\n  }\n\n  render() {\n    let { postType } = this.props;\n    let { likedPostsDetail, myPostsDetail } = this.state;\n    var simpPosts = [];\n    if (postType === \"MyLikes\") {\n      simpPosts = likedPostsDetail;\n    } else if (postType === \"MyPosts\") {\n      simpPosts = myPostsDetail;\n    }\n    return (\n      <React.Fragment>\n        {simpPosts\n          .map(simPost => {\n            return (\n              <SimplifiedPost\n                title={simPost.title}\n                views={faker.random.number()}\n                comments={simPost.comments}\n                tags={simPost.tags}\n                img={\n                  simPost.avatar ||\n                  \"https://bulma.io/images/placeholders/128x128.png\"\n                }\n                objectID={simPost._id}\n                handleCancelClick={this.handleCancelClick}\n                postType={postType}\n              />\n            );\n          })\n          .reverse()}\n      </React.Fragment>\n    );\n  }\n}\n\nconst mapStateToProps = state => {\n  return {\n    userID: state.persistedReducer.userID,\n    loggedIn: state.persistedReducer.loggedIn,\n    likedPosts: state.persistedReducer.likedPosts,\n    myPosts: state.persistedReducer.myPosts,\n    avatar: state.persistedReducer.avatar,\n    likedPostsDetail: state.persistedReducer.likedPostsDetail,\n    myPostsDetail: state.persistedReducer.myPostsDetail,\n    filterPosts: state.persistedReducer.filterPosts\n  };\n};\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    handleUpdatedLikedPosts: (updatedLikedPostsDetail, updatedLikedPosts) =>\n      dispatch({\n        type: \"USERLIKEDPOSTSUPDATED\",\n        likedPostsDetail: updatedLikedPostsDetail,\n        likedPosts: updatedLikedPosts\n      }),\n    handleUpdatedMyPosts: (updatedMyPostsDetail, updatedMyPosts) =>\n      dispatch({\n        type: \"USERMYPOSTSUPDATED\",\n        myPostsDetail: updatedMyPostsDetail,\n        myPosts: updatedMyPosts\n      }),\n    handlePostType: postType =>\n      dispatch({\n        type: \"UPDATEPOSTTYPE\",\n        postType: postType\n      })\n  };\n};\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(SimplifiedPosts);\n"]},"metadata":{},"sourceType":"module"}