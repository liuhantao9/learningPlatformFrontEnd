{"ast":null,"code":"var _jsxFileName = \"/Users/hantaoliu/Projects/Learning-Platform/techleak/client/src/components/searchTags/tagsearch.jsx\";\nimport React from \"react\";\nimport algoliasearch from \"algoliasearch\";\nimport \"instantsearch.css/themes/algolia.css\";\nimport { InstantSearch, Highlight, connectHits, Configure } from 'react-instantsearch-dom';\nimport CustomSearchBox from './searchbox';\nimport Flexbox from 'flexbox-react';\nconst searchClient = algoliasearch(process.env.REACT_APP_APPLICATION_ID, process.env.REACT_APP_SEARCH_ADMIN_API);\n\nconst HitComponent = ({\n  hit,\n  handleSelect,\n  styles\n}) => {\n  return React.createElement(\"div\", {\n    className: \"column box\",\n    style: styles.hit,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 21\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    onClick: () => handleSelect(hit.name),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 22\n    },\n    __self: this\n  }, React.createElement(Highlight, {\n    attribute: \"name\",\n    hit: hit,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 25\n    },\n    __self: this\n  })));\n};\n\nconst MyHits = connectHits(({\n  hits,\n  handleSelect,\n  styles\n}) => {\n  const hs = hits.map(hit => React.createElement(HitComponent, {\n    key: hit.objectID,\n    hit: hit,\n    handleSelect: handleSelect,\n    styles: styles,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 32\n    },\n    __self: this\n  }));\n  return React.createElement(\"div\", {\n    id: \"hits\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 37\n    },\n    __self: this\n  }, hs);\n});\n\nconst TagSearch = props => {\n  let inputTags = props.tags.map(tag => React.createElement(\"li\", {\n    key: tag,\n    style: props.styles.items,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 44\n    },\n    __self: this\n  }, tag, React.createElement(\"button\", {\n    onClick: () => props.handleRemoveItem(tag),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 46\n    },\n    __self: this\n  }, \"(x)\")));\n  let result = React.createElement(\"div\", {\n    className: \"container-fluid\",\n    id: \"results\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 56\n    },\n    __self: this\n  });\n\n  if (props.tags.length === 0) {\n    inputTags = React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 63\n      },\n      __self: this\n    }, React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 64\n      },\n      __self: this\n    }));\n  }\n\n  if (props.hitsDisplay) {\n    result = React.createElement(Flexbox, {\n      flexDirection: \"column\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 71\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"rows\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 74\n      },\n      __self: this\n    }, React.createElement(MyHits, {\n      handleSelect: props.handleSelect,\n      styles: props.styles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 75\n      },\n      __self: this\n    })));\n  }\n\n  return React.createElement(InstantSearch, {\n    indexName: \"tags\",\n    searchClient: searchClient,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 82\n    },\n    __self: this\n  }, React.createElement(\"label\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 83\n    },\n    __self: this\n  }, \"Tags\"), React.createElement(Configure, {\n    hitsPerPage: 12,\n    analytics: true,\n    distinct: true,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 84\n    },\n    __self: this\n  }), inputTags, React.createElement(CustomSearchBox, {\n    styles: props.styles,\n    openDisplay: props.openDisplay,\n    closeDisplay: props.closeDisplay,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 86\n    },\n    __self: this\n  }), result);\n};\n\nexport default TagSearch;","map":{"version":3,"sources":["/Users/hantaoliu/Projects/Learning-Platform/techleak/client/src/components/searchTags/tagsearch.jsx"],"names":["React","algoliasearch","InstantSearch","Highlight","connectHits","Configure","CustomSearchBox","Flexbox","searchClient","process","env","REACT_APP_APPLICATION_ID","REACT_APP_SEARCH_ADMIN_API","HitComponent","hit","handleSelect","styles","name","MyHits","hits","hs","map","objectID","TagSearch","props","inputTags","tags","tag","items","handleRemoveItem","result","length","hitsDisplay","openDisplay","closeDisplay"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport algoliasearch from \"algoliasearch\";\nimport \"instantsearch.css/themes/algolia.css\";\nimport {\n  InstantSearch,\n  Highlight,\n  connectHits,\n  Configure\n} from 'react-instantsearch-dom';\nimport CustomSearchBox from './searchbox';\nimport Flexbox from 'flexbox-react';\n\nconst searchClient = algoliasearch(\n  process.env.REACT_APP_APPLICATION_ID,\n  process.env.REACT_APP_SEARCH_ADMIN_API\n);\n\n\nconst HitComponent = ({ hit, handleSelect, styles }) => {\n  return (\n    <div className=\"column box\" style={styles.hit}>\n      <div \n        onClick={() => handleSelect(hit.name)}\n      >\n        <Highlight attribute=\"name\" hit={hit} />\n      </div>\n    </div>\n  );\n}\n\nconst MyHits = connectHits(({ hits, handleSelect, styles }) => {\n  const hs = hits.map(hit => <HitComponent \n                                key={hit.objectID} \n                                hit={hit} \n                                handleSelect={handleSelect}\n                                styles={styles}/>);\n  return <div id=\"hits\">{hs}</div>;\n})\n\nconst TagSearch = (props) => {\n\n  let inputTags = (\n    props.tags.map((tag) => \n      <li key={tag} style={props.styles.items}>\n        {tag}\n        <button\n          onClick={() => props.handleRemoveItem(tag)}\n        >\n          (x)\n        </button>\n      </li>\n    )\n  )\n  \n  let result = (\n    <div className=\"container-fluid\" id=\"results\">\n\n    </div>\n  )\n\n  if (props.tags.length === 0) {\n    inputTags = (\n      <div>\n        <br />\n      </div>\n    )\n  }\n\n  if (props.hitsDisplay) {\n    result = (\n      <Flexbox \n        flexDirection=\"column\" \n      >\n        <div className=\"rows\">\n          <MyHits handleSelect={props.handleSelect} styles={props.styles}/>\n        </div>\n      </Flexbox>\n    )\n  }\n\n  return (\n    <InstantSearch indexName=\"tags\" searchClient={searchClient}>\n      <label>Tags</label>\n      <Configure hitsPerPage={12} analytics={true} distinct />\n      {inputTags}\n      <CustomSearchBox\n        styles={props.styles}\n        openDisplay={props.openDisplay}\n        closeDisplay={props.closeDisplay}\n      />\n      {result}\n\n    </InstantSearch>\n  );\n}\n\nexport default TagSearch;"]},"metadata":{},"sourceType":"module"}