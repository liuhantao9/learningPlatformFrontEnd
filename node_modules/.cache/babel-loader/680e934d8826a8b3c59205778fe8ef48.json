{"ast":null,"code":"var _jsxFileName = \"/Users/hantaoliu/Projects/Learning-Platform/techleak/client/src/components/userProfile/userProfileComponent/simplifedPosts.jsx\";\nimport React from \"react\";\nimport axios from \"axios\";\nimport { connect } from \"react-redux\";\nimport SimplifiedPost from \"./simplifiedPost\";\n\nvar faker = require(\"faker\");\n\nclass SimplifiedPosts extends React.Component {\n  constructor(props) {\n    super(props);\n    this.retrievePosts(this.props.PostType);\n    this.state = {\n      simpPosts: []\n    };\n    this.handleCancelClick = this.handleCancelClick.bind(this);\n  }\n\n  retrievePosts(PostType) {\n    const tempPosts = [];\n    var processPosts = [];\n\n    if (PostType === \"MyLikes\") {\n      processPosts = this.props.likedPosts;\n    } else if (PostType === \"MyPosts\") {\n      processPosts = this.props.myPosts;\n    }\n\n    for (var i = 0; i < processPosts.length; i++) {\n      axios.get(\"\".concat(process.env.REACT_APP_BACKEND_SERVER, \"/api/posts/\").concat(processPosts[i])).then(res => {\n        var temp = {\n          title: \"\",\n          views: \"\",\n          answers: \"\",\n          tagNames: \"\",\n          img: \"\",\n          objectID: \"\"\n        };\n        temp.title = res.data.title;\n        temp.views = faker.random.number();\n        temp.answers = res.data.comments.length;\n        temp.tagNames = res.data.tags;\n        temp.img = faker.image.avatar();\n        temp.objectID = res.data._id;\n        tempPosts.push(temp);\n        this.setState({\n          simpPosts: tempPosts\n        });\n      }).catch(err => console.log(err));\n    }\n  } // randomPosts() {\n  //     var simpPosts = [];\n  //     for (var i = 0; i < 10; i++) {\n  //         var temp = { title: \"\", views: \"\", answers: \"\", tagNames: \"\", img: \"\" };\n  //         temp.title = faker.lorem.lines();\n  //         temp.views = faker.random.number();\n  //         temp.answers = faker.random.number();\n  //         temp.tagNames = [faker.random.word(), faker.random.word(), faker.random.word()];\n  //         temp.img = faker.image.avatar();\n  //         simpPosts.push(temp);\n  //     }\n  //     return simpPosts;\n  // }\n\n\n  handleCancelClick(e, title) {\n    e.preventDefault();\n    const newSimpPosts = this.state.simpPosts.filter(simPost => {\n      return simPost.title !== title;\n    });\n    this.setState({\n      simpPosts: [...newSimpPosts]\n    });\n  }\n\n  render() {\n    const simpPosts = this.state.simpPosts;\n    return React.createElement(React.Fragment, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 81\n      },\n      __self: this\n    }, simpPosts.map(simPost => {\n      return React.createElement(SimplifiedPost, {\n        title: simPost.title,\n        views: simPost.views,\n        answers: simPost.answers,\n        tagNames: simPost.tagNames,\n        img: simPost.img,\n        objectID: simPost.objectID,\n        handleCancelClick: this.handleCancelClick,\n        PostType: this.props.PostType,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 84\n        },\n        __self: this\n      });\n    }));\n  }\n\n}\n\nconst mapStateToProps = state => {\n  return {\n    userID: state.persistedReducer.userID,\n    loggedIn: state.persistedReducer.loggedIn,\n    likedPosts: state.persistedReducer.likedPosts,\n    myPosts: state.persistedReducer.myPosts\n  };\n};\n\nexport default connect(mapStateToProps)(SimplifiedPosts);","map":{"version":3,"sources":["/Users/hantaoliu/Projects/Learning-Platform/techleak/client/src/components/userProfile/userProfileComponent/simplifedPosts.jsx"],"names":["React","axios","connect","SimplifiedPost","faker","require","SimplifiedPosts","Component","constructor","props","retrievePosts","PostType","state","simpPosts","handleCancelClick","bind","tempPosts","processPosts","likedPosts","myPosts","i","length","get","process","env","REACT_APP_BACKEND_SERVER","then","res","temp","title","views","answers","tagNames","img","objectID","data","random","number","comments","tags","image","avatar","_id","push","setState","catch","err","console","log","e","preventDefault","newSimpPosts","filter","simPost","render","map","mapStateToProps","userID","persistedReducer","loggedIn"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport axios from \"axios\";\nimport { connect } from \"react-redux\";\nimport SimplifiedPost from \"./simplifiedPost\";\n\nvar faker = require(\"faker\");\n\nclass SimplifiedPosts extends React.Component {\n  constructor(props) {\n    super(props);\n    this.retrievePosts(this.props.PostType);\n    this.state = {\n      simpPosts: []\n    };\n    this.handleCancelClick = this.handleCancelClick.bind(this);\n  }\n\n  retrievePosts(PostType) {\n    const tempPosts = [];\n    var processPosts = [];\n    if (PostType === \"MyLikes\") {\n      processPosts = this.props.likedPosts;\n    } else if (PostType === \"MyPosts\") {\n      processPosts = this.props.myPosts;\n    }\n    for (var i = 0; i < processPosts.length; i++) {\n      axios\n        .get(\n          `${process.env.REACT_APP_BACKEND_SERVER}/api/posts/${processPosts[i]}`\n        )\n        .then(res => {\n          var temp = {\n            title: \"\",\n            views: \"\",\n            answers: \"\",\n            tagNames: \"\",\n            img: \"\",\n            objectID: \"\"\n          };\n          temp.title = res.data.title;\n          temp.views = faker.random.number();\n          temp.answers = res.data.comments.length;\n          temp.tagNames = res.data.tags;\n          temp.img = faker.image.avatar();\n          temp.objectID = res.data._id;\n          tempPosts.push(temp);\n          this.setState({ simpPosts: tempPosts });\n        })\n        .catch(err => console.log(err));\n    }\n  }\n\n  // randomPosts() {\n  //     var simpPosts = [];\n  //     for (var i = 0; i < 10; i++) {\n  //         var temp = { title: \"\", views: \"\", answers: \"\", tagNames: \"\", img: \"\" };\n  //         temp.title = faker.lorem.lines();\n  //         temp.views = faker.random.number();\n  //         temp.answers = faker.random.number();\n  //         temp.tagNames = [faker.random.word(), faker.random.word(), faker.random.word()];\n  //         temp.img = faker.image.avatar();\n  //         simpPosts.push(temp);\n  //     }\n  //     return simpPosts;\n  // }\n\n  handleCancelClick(e, title) {\n    e.preventDefault();\n    const newSimpPosts = this.state.simpPosts.filter(simPost => {\n      return simPost.title !== title;\n    });\n\n    this.setState({\n      simpPosts: [...newSimpPosts]\n    });\n  }\n\n  render() {\n    const { simpPosts } = this.state;\n    return (\n      <React.Fragment>\n        {simpPosts.map(simPost => {\n          return (\n            <SimplifiedPost\n              title={simPost.title}\n              views={simPost.views}\n              answers={simPost.answers}\n              tagNames={simPost.tagNames}\n              img={simPost.img}\n              objectID={simPost.objectID}\n              handleCancelClick={this.handleCancelClick}\n              PostType={this.props.PostType}\n            />\n          );\n        })}\n      </React.Fragment>\n    );\n  }\n}\n\nconst mapStateToProps = state => {\n  return {\n    userID: state.persistedReducer.userID,\n    loggedIn: state.persistedReducer.loggedIn,\n    likedPosts: state.persistedReducer.likedPosts,\n    myPosts: state.persistedReducer.myPosts\n  };\n};\n\nexport default connect(mapStateToProps)(SimplifiedPosts);\n"]},"metadata":{},"sourceType":"module"}