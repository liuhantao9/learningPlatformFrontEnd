{"ast":null,"code":"import _objectWithoutProperties from \"/Users/hantaoliu/Projects/Learning-Platform/techleak/client/node_modules/@babel/runtime/helpers/esm/objectWithoutProperties\";\nimport _objectSpread from \"/Users/hantaoliu/Projects/Learning-Platform/techleak/client/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nimport getReputation from \"../utils/getSumFromArray\";\nconst initialState = {\n  loggedIn: false,\n  signupOpen: false,\n  loginOpen: false,\n  contactUsOpen: false,\n  shareOpen: false,\n  username: \"\",\n  userID: \"\",\n  likedPosts: [],\n  likedPostsDetail: [],\n  comments: [],\n  replies: [],\n  myPosts: [],\n  myPostsDetail: [],\n  filterPosts: [],\n  postType: \"\",\n  menu_class: \"\",\n  avatar: \"\",\n  likes: {},\n  piginationNumber: 1,\n  bio: \"\",\n  reputation: 0,\n  knowledge: 0,\n  warning: false,\n  warningContent: \"\"\n};\n\nconst reducer = (state = initialState, action) => {\n  if (action.type === \"LOGIN\") {\n    return _objectSpread({}, state, {\n      loggedIn: true,\n      userID: action.userID,\n      username: action.username,\n      likedPosts: action.likedPosts,\n      myPosts: action.myPosts,\n      avatar: action.avatar,\n      likedPostsDetail: action.likedPostsDetail,\n      myPostsDetail: action.myPostsDetail,\n      bio: action.bio,\n      reputation: getReputation(action.myPostsDetail, \"likes\"),\n      knowledge: action.myPosts.length\n    });\n  }\n\n  if (action.type === \"SIGNUP\") {\n    return _objectSpread({}, state, {\n      loggedIn: true,\n      userID: action.userID,\n      username: action.username\n    });\n  }\n\n  if (action.type === \"LOGOUT\") {\n    return _objectSpread({}, state, {\n      loggedIn: false,\n      signupOpen: false,\n      loginOpen: false,\n      contactUsOpen: false,\n      shareOpen: false,\n      username: \"\",\n      userID: \"\",\n      likedPosts: [],\n      myPosts: [],\n      menu_class: \"\",\n      likedPostsDetail: [],\n      myPostsDetail: [],\n      avatar: \"\",\n      comments: [],\n      replies: []\n    });\n  }\n\n  if (action.type === \"SIGNUPMODAL\") {\n    //Here, after submit or even close, we\n    //will redirect to login modal\n    return _objectSpread({}, state, {\n      signupOpen: !state.signupOpen\n    });\n  }\n\n  if (action.type === \"LOGINMODAL\") {\n    return _objectSpread({}, state, {\n      loginOpen: !state.loginOpen\n    });\n  }\n\n  if (action.type === \"CONTACTMODAL\") {\n    return _objectSpread({}, state, {\n      contactUsOpen: !state.contactUsOpen\n    });\n  }\n\n  if (action.type === \"SHAREMODAL\") {\n    return _objectSpread({}, state, {\n      shareOpen: !state.shareOpen\n    });\n  }\n\n  if (action.type === \"TOGGLEMENUCLASS\") {\n    return _objectSpread({}, state, {\n      menu_class: state.menu_class === \"\" ? \"toggled\" : \"\"\n    });\n  }\n\n  if (action.type === \"GETBLOG\") {\n    let tempComments = [];\n    let tempReplies = [];\n    action.blog.comments.map(comment => {\n      const replies = comment.replies,\n            clone = _objectWithoutProperties(comment, [\"replies\"]);\n\n      tempComments.push(_objectSpread({}, clone));\n\n      for (const reply of replies) {\n        if (reply) {\n          tempReplies.push(_objectSpread({}, reply, {\n            commentRef: comment._id\n          }));\n        }\n      }\n\n      return null;\n    });\n    return _objectSpread({}, state, {\n      comments: tempComments,\n      replies: tempReplies\n    });\n  }\n\n  if (action.type === \"ADDCOMMENT\") {\n    let temp = [...state.comments];\n    temp.push(action.comment);\n    return _objectSpread({}, state, {\n      comments: temp\n    });\n  }\n\n  if (action.type === \"REFRESHLIKES\") {\n    let temp = {};\n    return _objectSpread({}, state, {\n      likes: temp\n    });\n  }\n\n  if (action.type === \"HANDLELIKE\") {\n    let temp = _objectSpread({}, state.likes);\n\n    action.hits.map(hit => {\n      if (temp[hit.objectID] === undefined) {\n        temp[hit.objectID] = hit.likes;\n      }\n\n      return null;\n    });\n    return _objectSpread({}, state, {\n      likes: temp\n    });\n  }\n\n  if (action.type === \"ADDREPLY\") {\n    let temp = [...state.replies];\n    temp.push(action.reply);\n    return _objectSpread({}, state, {\n      replies: temp\n    });\n  }\n\n  if (action.type === \"HANDLELIKEPOSTS\") {\n    let temp = _objectSpread({}, state.likes);\n\n    temp[action.id] += action.liked ? -1 : 1; //remove duplicates\n\n    let newLikePosts = new Set([...state.likedPosts]);\n    action.liked ? newLikePosts.delete(action.id) : newLikePosts.add(action.id);\n    let newLikePostsDetail = new Set([...state.likedPostsDetail]);\n    action.liked ? newLikePostsDetail.forEach(function (lPostDetail) {\n      if (lPostDetail === null) {\n        newLikePostsDetail.delete(lPostDetail);\n      } else if (lPostDetail._id === action.id) {\n        newLikePostsDetail.delete(lPostDetail);\n      }\n    }) : newLikePostsDetail.add(action.rawPostData);\n    return _objectSpread({}, state, {\n      likedPosts: [...newLikePosts],\n      likedPostsDetail: [...newLikePostsDetail],\n      likes: temp\n    });\n  }\n\n  if (action.type === \"UPDATEAVATAR\") {\n    return _objectSpread({}, state, {\n      avatar: action.avatar\n    });\n  }\n\n  if (action.type === \"USERMYPOSTSUPDATED\") {\n    return _objectSpread({}, state, {\n      myPosts: action.myPosts,\n      myPostsDetail: action.myPostsDetail\n    });\n  }\n\n  if (action.type === \"USERLIKEDPOSTSUPDATED\") {\n    return _objectSpread({}, state, {\n      likedPosts: action.likedPosts,\n      likedPostsDetail: action.likedPostsDetail\n    });\n  }\n\n  if (action.type === \"AUTHENTICATION_PASSWORD_RESET_CLEAR\") if (action.type === \"AUTHENTICATION_PASSWORD_RESET_HASH_FAILURE\") {\n    return _objectSpread({}, state, {\n      isPasswordReset: false\n    });\n  }\n\n  if (action.type === \"AUTHENTICATION_PASSWORD_RESET_HASH_CREATED\") {\n    return _objectSpread({}, state, {\n      isPasswordReset: true\n    });\n  }\n\n  if (action.type === \"DELETEREPLY\") {\n    let temp = [...state.replies];\n    temp = temp.filter(el => el._id !== action.id);\n    return _objectSpread({}, state, {\n      replies: temp\n    });\n  }\n\n  if (action.type === \"DELETECOMMENT\") {\n    let temp = [...state.comments];\n    temp = temp.filter(el => el._id !== action.id);\n    return _objectSpread({}, state, {\n      comments: temp\n    });\n  }\n\n  if (action.type === \"UPDATEPOSTTYPE\") {\n    return _objectSpread({}, state, {\n      postType: action.postType\n    });\n  }\n\n  if (action.type === \"FILTERCHANGE\") {\n    return _objectSpread({}, state, {\n      filterPosts: action.filteredPostsDetail\n    });\n  }\n\n  if (action.type === \"REMOVELIKES\") {\n    return _objectSpread({}, state, {\n      likes: {}\n    });\n  }\n\n  if (action.type === \"PIGINATIONNUMBER\") {\n    return _objectSpread({}, state, {\n      piginationNumber: action.currRefinement\n    });\n  }\n\n  if (action.type === \"UPDATEBIO\") {\n    return _objectSpread({}, state, {\n      bio: action.bio\n    });\n  }\n\n  if (action.type === \"GETWARNING\") {\n    return _objectSpread({}, state, {\n      warning: true,\n      warningContent: action.warning\n    });\n  }\n\n  if (action.type === \"CANCELWARNING\") {\n    return _objectSpread({}, state, {\n      warning: false,\n      warningContent: \"\"\n    });\n  }\n\n  return state;\n};\n\nexport default reducer;","map":{"version":3,"sources":["/Users/hantaoliu/Projects/Learning-Platform/techleak/client/src/reducers/generalReducer.js"],"names":["getReputation","initialState","loggedIn","signupOpen","loginOpen","contactUsOpen","shareOpen","username","userID","likedPosts","likedPostsDetail","comments","replies","myPosts","myPostsDetail","filterPosts","postType","menu_class","avatar","likes","piginationNumber","bio","reputation","knowledge","warning","warningContent","reducer","state","action","type","length","tempComments","tempReplies","blog","map","comment","clone","push","reply","commentRef","_id","temp","hits","hit","objectID","undefined","id","liked","newLikePosts","Set","delete","add","newLikePostsDetail","forEach","lPostDetail","rawPostData","isPasswordReset","filter","el","filteredPostsDetail","currRefinement"],"mappings":"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","sourcesContent":["import getReputation from \"../utils/getSumFromArray\";\n\nconst initialState = {\n  loggedIn: false,\n  signupOpen: false,\n  loginOpen: false,\n  contactUsOpen: false,\n  shareOpen: false,\n  username: \"\",\n  userID: \"\",\n  likedPosts: [],\n  likedPostsDetail: [],\n  comments: [],\n  replies: [],\n  myPosts: [],\n  myPostsDetail: [],\n  filterPosts: [],\n  postType: \"\",\n  menu_class: \"\",\n  avatar: \"\",\n  likes: {},\n  piginationNumber: 1,\n  bio: \"\",\n  reputation: 0,\n  knowledge: 0,\n  warning: false,\n  warningContent: \"\"\n};\n\nconst reducer = (state = initialState, action) => {\n  if (action.type === \"LOGIN\") {\n    return {\n      ...state,\n      loggedIn: true,\n      userID: action.userID,\n      username: action.username,\n      likedPosts: action.likedPosts,\n      myPosts: action.myPosts,\n      avatar: action.avatar,\n      likedPostsDetail: action.likedPostsDetail,\n      myPostsDetail: action.myPostsDetail,\n      bio: action.bio,\n      reputation: getReputation(action.myPostsDetail, \"likes\"),\n      knowledge: action.myPosts.length\n    };\n  }\n  if (action.type === \"SIGNUP\") {\n    return {\n      ...state,\n      loggedIn: true,\n      userID: action.userID,\n      username: action.username\n    };\n  }\n  if (action.type === \"LOGOUT\") {\n    return {\n      ...state,\n      loggedIn: false,\n      signupOpen: false,\n      loginOpen: false,\n      contactUsOpen: false,\n      shareOpen: false,\n      username: \"\",\n      userID: \"\",\n      likedPosts: [],\n      myPosts: [],\n      menu_class: \"\",\n      likedPostsDetail: [],\n      myPostsDetail: [],\n      avatar: \"\",\n      comments: [],\n      replies: []\n    };\n  }\n  if (action.type === \"SIGNUPMODAL\") {\n    //Here, after submit or even close, we\n    //will redirect to login modal\n\n    return {\n      ...state,\n      signupOpen: !state.signupOpen\n    };\n  }\n  if (action.type === \"LOGINMODAL\") {\n    return {\n      ...state,\n      loginOpen: !state.loginOpen\n    };\n  }\n  if (action.type === \"CONTACTMODAL\") {\n    return {\n      ...state,\n      contactUsOpen: !state.contactUsOpen\n    };\n  }\n  if (action.type === \"SHAREMODAL\") {\n    return {\n      ...state,\n      shareOpen: !state.shareOpen\n    };\n  }\n  if (action.type === \"TOGGLEMENUCLASS\") {\n    return {\n      ...state,\n      menu_class: state.menu_class === \"\" ? \"toggled\" : \"\"\n    };\n  }\n  if (action.type === \"GETBLOG\") {\n    let tempComments = [];\n    let tempReplies = [];\n    action.blog.comments.map(comment => {\n      const { replies, ...clone } = comment;\n      tempComments.push({ ...clone });\n\n      for (const reply of replies) {\n        if (reply) {\n          tempReplies.push({ ...reply, commentRef: comment._id });\n        }\n      }\n      return null;\n    });\n\n    return {\n      ...state,\n      comments: tempComments,\n      replies: tempReplies\n    };\n  }\n  if (action.type === \"ADDCOMMENT\") {\n    let temp = [...state.comments];\n    temp.push(action.comment);\n\n    return {\n      ...state,\n      comments: temp\n    };\n  }\n\n  if (action.type === \"REFRESHLIKES\") {\n    let temp = {};\n    return {\n      ...state,\n      likes: temp\n    };\n  }\n\n  if (action.type === \"HANDLELIKE\") {\n    let temp = { ...state.likes };\n    action.hits.map(hit => {\n      if (temp[hit.objectID] === undefined) {\n        temp[hit.objectID] = hit.likes;\n      }\n      return null;\n    });\n    return {\n      ...state,\n      likes: temp\n    };\n  }\n  if (action.type === \"ADDREPLY\") {\n    let temp = [...state.replies];\n    temp.push(action.reply);\n\n    return {\n      ...state,\n      replies: temp\n    };\n  }\n  if (action.type === \"HANDLELIKEPOSTS\") {\n    let temp = { ...state.likes };\n    temp[action.id] += action.liked ? -1 : 1;\n    //remove duplicates\n    let newLikePosts = new Set([...state.likedPosts]);\n    action.liked ? newLikePosts.delete(action.id) : newLikePosts.add(action.id);\n    let newLikePostsDetail = new Set([...state.likedPostsDetail]);\n    action.liked\n      ? newLikePostsDetail.forEach(function(lPostDetail) {\n          if (lPostDetail === null) {\n            newLikePostsDetail.delete(lPostDetail);\n          } else if (lPostDetail._id === action.id) {\n            newLikePostsDetail.delete(lPostDetail);\n          }\n        })\n      : newLikePostsDetail.add(action.rawPostData);\n    return {\n      ...state,\n      likedPosts: [...newLikePosts],\n      likedPostsDetail: [...newLikePostsDetail],\n      likes: temp\n    };\n  }\n  if (action.type === \"UPDATEAVATAR\") {\n    return {\n      ...state,\n      avatar: action.avatar\n    };\n  }\n  if (action.type === \"USERMYPOSTSUPDATED\") {\n    return {\n      ...state,\n      myPosts: action.myPosts,\n      myPostsDetail: action.myPostsDetail\n    };\n  }\n  if (action.type === \"USERLIKEDPOSTSUPDATED\") {\n    return {\n      ...state,\n      likedPosts: action.likedPosts,\n      likedPostsDetail: action.likedPostsDetail\n    };\n  }\n  if (action.type === \"AUTHENTICATION_PASSWORD_RESET_CLEAR\")\n    if (action.type === \"AUTHENTICATION_PASSWORD_RESET_HASH_FAILURE\") {\n      return {\n        ...state,\n        isPasswordReset: false\n      };\n    }\n  if (action.type === \"AUTHENTICATION_PASSWORD_RESET_HASH_CREATED\") {\n    return {\n      ...state,\n      isPasswordReset: true\n    };\n  }\n  if (action.type === \"DELETEREPLY\") {\n    let temp = [...state.replies];\n    temp = temp.filter(el => el._id !== action.id);\n    return {\n      ...state,\n      replies: temp\n    };\n  }\n  if (action.type === \"DELETECOMMENT\") {\n    let temp = [...state.comments];\n    temp = temp.filter(el => el._id !== action.id);\n    return {\n      ...state,\n      comments: temp\n    };\n  }\n  if (action.type === \"UPDATEPOSTTYPE\") {\n    return {\n      ...state,\n      postType: action.postType\n    };\n  }\n  if (action.type === \"FILTERCHANGE\") {\n    return {\n      ...state,\n      filterPosts: action.filteredPostsDetail\n    };\n  }\n  if (action.type === \"REMOVELIKES\") {\n    return {\n      ...state,\n      likes: {}\n    };\n  }\n  if (action.type === \"PIGINATIONNUMBER\") {\n    return {\n      ...state,\n      piginationNumber: action.currRefinement\n    };\n  }\n  if (action.type === \"UPDATEBIO\") {\n    return {\n      ...state,\n      bio: action.bio\n    };\n  }\n  if (action.type === \"GETWARNING\") {\n    return {\n      ...state,\n      warning: true,\n      warningContent: action.warning\n    };\n  }\n  if (action.type === \"CANCELWARNING\") {\n    return {\n      ...state,\n      warning: false,\n      warningContent: \"\"\n    };\n  }\n  return state;\n};\n\nexport default reducer;\n"]},"metadata":{},"sourceType":"module"}