{"ast":null,"code":"var _jsxFileName = \"/Users/hantaoliu/Projects/Learning-Platform/techleak/client/src/components/userProfile/userProfileComponent/simplifedPosts.jsx\";\nimport React from \"react\";\nimport axios from \"axios\";\nimport { connect } from \"react-redux\";\nimport SimplifiedPost from \"./simplifiedPost\";\nimport { stat } from \"fs\";\n\nvar faker = require(\"faker\");\n\nclass SimplifiedPosts extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      likedPostsDetail: this.props.likedPostsDetail,\n      myPostsDetail: this.props.myPostsDetail,\n      likedPosts: this.props.likedPosts,\n      myPosts: this.props.myPosts,\n      filterPosts: this.props.filterPosts\n    };\n    this.handleCancelClick = this.handleCancelClick.bind(this); // let redux know which post tab the user is looking at\n\n    this.props.handlePostType(this.props.postType);\n  }\n\n  componentDidUpdate(prevProps) {\n    console.log(this.props.filterPosts);\n\n    if (this.props.filterPosts.length !== prevProps.filterPosts.length) {\n      if (this.props.postType === \"MyLikes\") {\n        this.setState({\n          likedPostsDetail: this.props.filterPosts\n        });\n      } else if (this.props.postType === \"MyPosts\") {\n        this.setState({\n          myPostsDetail: this.props.filterPosts\n        });\n      }\n    }\n  } // this method updates the local state and the redux of my posts and liked posts\n  // when a deleted button was clicked.\n\n\n  handleCancelClick(e, objectID, postType) {\n    e.preventDefault();\n\n    if (postType === \"MyLikes\") {\n      // \"deleting\" a post should always act upon the \"unchangeable props\" instead of state\n      const updatedLikedPostsDetail = this.props.likedPostsDetail.filter(function (lPostDetail) {\n        return lPostDetail._id != objectID;\n      });\n      const updatedLikedPosts = this.props.likedPosts.filter(likedPost => {\n        return likedPost !== objectID;\n      }); // the state and the props may have different value because of the filter\n\n      const updatedLikedPostsDetailState = this.state.likedPostsDetail.filter(function (lPostDetail) {\n        return lPostDetail._id != objectID;\n      });\n      const updatedLikedPostsState = this.state.likedPosts.filter(likedPost => {\n        return likedPost !== objectID;\n      }); // this portion update the local state (by using setState) to achieve new rendering\n\n      this.setState({\n        likedPostsDetail: updatedLikedPostsDetailState,\n        likedPosts: updatedLikedPostsState\n      }); // this portion update the redux to finalize the delete\n\n      this.props.handleUpdatedLikedPosts(updatedLikedPostsDetail, updatedLikedPosts);\n    }\n\n    if (postType === \"MyPosts\") {\n      // \"deleting\" a post should always act upon the \"unchangeable props\" instead of state\n      const updatedMyPostsDetail = this.props.myPostsDetail.filter(function (mPostDetail) {\n        return mPostDetail._id != objectID;\n      });\n      const updatedMyPosts = this.props.myPosts.filter(myPost => {\n        return myPost !== objectID;\n      }); // the state and the props may have different value because of the filter\n\n      const updatedMyPostsDetailState = this.state.myPostsDetail.filter(function (mPostDetail) {\n        return mPostDetail._id != objectID;\n      });\n      const updatedMyPostsState = this.state.myPosts.filter(myPost => {\n        return myPost !== objectID;\n      }); // this portion update the local state (by using setState) to achieve new rendering\n\n      this.setState({\n        myPostsDetail: updatedMyPostsDetailState,\n        myPosts: updatedMyPostsState\n      }); // this portion update the redux to finalize the delete\n\n      this.props.handleUpdatedMyPosts(updatedMyPostsDetail, updatedMyPosts);\n    }\n  }\n\n  render() {\n    let postType = this.props.postType;\n    let _this$state = this.state,\n        likedPostsDetail = _this$state.likedPostsDetail,\n        myPostsDetail = _this$state.myPostsDetail;\n    var simpPosts = [];\n\n    if (postType === \"MyLikes\") {\n      simpPosts = likedPostsDetail;\n    } else if (postType === \"MyPosts\") {\n      simpPosts = myPostsDetail;\n    }\n\n    return React.createElement(React.Fragment, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 114\n      },\n      __self: this\n    }, simpPosts.map(simPost => {\n      return React.createElement(SimplifiedPost, {\n        title: simPost.title,\n        views: faker.random.number(),\n        comments: simPost.comments,\n        tags: simPost.tags,\n        img: simPost.avatar || \"https://bulma.io/images/placeholders/128x128.png\",\n        objectID: simPost._id,\n        handleCancelClick: this.handleCancelClick,\n        postType: postType,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 118\n        },\n        __self: this\n      });\n    }).reverse());\n  }\n\n}\n\nconst mapStateToProps = state => {\n  return {\n    userID: state.persistedReducer.userID,\n    loggedIn: state.persistedReducer.loggedIn,\n    likedPosts: state.persistedReducer.likedPosts,\n    myPosts: state.persistedReducer.myPosts,\n    avatar: state.persistedReducer.avatar,\n    likedPostsDetail: state.persistedReducer.likedPostsDetail,\n    myPostsDetail: state.persistedReducer.myPostsDetail,\n    filterPosts: state.persistedReducer.filterPosts\n  };\n};\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    handleUpdatedLikedPosts: (updatedLikedPostsDetail, updatedLikedPosts) => dispatch({\n      type: \"USERLIKEDPOSTSUPDATED\",\n      likedPostsDetail: updatedLikedPostsDetail,\n      likedPosts: updatedLikedPosts\n    }),\n    handleUpdatedMyPosts: (updatedMyPostsDetail, updatedMyPosts) => dispatch({\n      type: \"USERMYPOSTSUPDATED\",\n      myPostsDetail: updatedMyPostsDetail,\n      myPosts: updatedMyPosts\n    }),\n    handlePostType: postType => dispatch({\n      type: \"UPDATEPOSTTYPE\",\n      postType: postType\n    })\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(SimplifiedPosts);","map":{"version":3,"sources":["/Users/hantaoliu/Projects/Learning-Platform/techleak/client/src/components/userProfile/userProfileComponent/simplifedPosts.jsx"],"names":["React","axios","connect","SimplifiedPost","stat","faker","require","SimplifiedPosts","Component","constructor","props","state","likedPostsDetail","myPostsDetail","likedPosts","myPosts","filterPosts","handleCancelClick","bind","handlePostType","postType","componentDidUpdate","prevProps","console","log","length","setState","e","objectID","preventDefault","updatedLikedPostsDetail","filter","lPostDetail","_id","updatedLikedPosts","likedPost","updatedLikedPostsDetailState","updatedLikedPostsState","handleUpdatedLikedPosts","updatedMyPostsDetail","mPostDetail","updatedMyPosts","myPost","updatedMyPostsDetailState","updatedMyPostsState","handleUpdatedMyPosts","render","simpPosts","map","simPost","title","random","number","comments","tags","avatar","reverse","mapStateToProps","userID","persistedReducer","loggedIn","mapDispatchToProps","dispatch","type"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport axios from \"axios\";\nimport { connect } from \"react-redux\";\nimport SimplifiedPost from \"./simplifiedPost\";\nimport { stat } from \"fs\";\n\nvar faker = require(\"faker\");\n\nclass SimplifiedPosts extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      likedPostsDetail: this.props.likedPostsDetail,\n      myPostsDetail: this.props.myPostsDetail,\n      likedPosts: this.props.likedPosts,\n      myPosts: this.props.myPosts,\n      filterPosts: this.props.filterPosts\n    };\n    this.handleCancelClick = this.handleCancelClick.bind(this);\n    // let redux know which post tab the user is looking at\n    this.props.handlePostType(this.props.postType);\n  }\n\n  componentDidUpdate(prevProps) {\n    console.log(this.props.filterPosts);\n    if (this.props.filterPosts.length !== prevProps.filterPosts.length) {\n      if (this.props.postType === \"MyLikes\") {\n        this.setState({\n          likedPostsDetail: this.props.filterPosts\n        });\n      } else if (this.props.postType === \"MyPosts\") {\n        this.setState({\n          myPostsDetail: this.props.filterPosts\n        });\n      }\n    }\n  }\n\n  // this method updates the local state and the redux of my posts and liked posts\n  // when a deleted button was clicked.\n  handleCancelClick(e, objectID, postType) {\n    e.preventDefault();\n\n    if (postType === \"MyLikes\") {\n      // \"deleting\" a post should always act upon the \"unchangeable props\" instead of state\n      const updatedLikedPostsDetail = this.props.likedPostsDetail.filter(\n        function (lPostDetail) {\n          return lPostDetail._id != objectID;\n        }\n      );\n      const updatedLikedPosts = this.props.likedPosts.filter(likedPost => {\n        return likedPost !== objectID;\n      });\n      // the state and the props may have different value because of the filter\n      const updatedLikedPostsDetailState = this.state.likedPostsDetail.filter(\n        function (lPostDetail) {\n          return lPostDetail._id != objectID;\n        }\n      );\n      const updatedLikedPostsState = this.state.likedPosts.filter(likedPost => {\n        return likedPost !== objectID;\n      });\n      // this portion update the local state (by using setState) to achieve new rendering\n      this.setState({\n        likedPostsDetail: updatedLikedPostsDetailState,\n        likedPosts: updatedLikedPostsState\n      });\n      // this portion update the redux to finalize the delete\n      this.props.handleUpdatedLikedPosts(\n        updatedLikedPostsDetail,\n        updatedLikedPosts\n      );\n    }\n\n    if (postType === \"MyPosts\") {\n      // \"deleting\" a post should always act upon the \"unchangeable props\" instead of state\n      const updatedMyPostsDetail = this.props.myPostsDetail.filter(function (\n        mPostDetail\n      ) {\n        return mPostDetail._id != objectID;\n      });\n      const updatedMyPosts = this.props.myPosts.filter(myPost => {\n        return myPost !== objectID;\n      });\n      // the state and the props may have different value because of the filter\n      const updatedMyPostsDetailState = this.state.myPostsDetail.filter(\n        function (mPostDetail) {\n          return mPostDetail._id != objectID;\n        }\n      );\n      const updatedMyPostsState = this.state.myPosts.filter(myPost => {\n        return myPost !== objectID;\n      });\n      // this portion update the local state (by using setState) to achieve new rendering\n      this.setState({\n        myPostsDetail: updatedMyPostsDetailState,\n        myPosts: updatedMyPostsState\n      });\n      // this portion update the redux to finalize the delete\n      this.props.handleUpdatedMyPosts(updatedMyPostsDetail, updatedMyPosts);\n    }\n  }\n\n  render() {\n    let { postType } = this.props;\n    let { likedPostsDetail, myPostsDetail } = this.state;\n    var simpPosts = [];\n    if (postType === \"MyLikes\") {\n      simpPosts = likedPostsDetail;\n    } else if (postType === \"MyPosts\") {\n      simpPosts = myPostsDetail;\n    }\n    return (\n      <React.Fragment>\n        {simpPosts\n          .map(simPost => {\n            return (\n              <SimplifiedPost\n                title={simPost.title}\n                views={faker.random.number()}\n                comments={simPost.comments}\n                tags={simPost.tags}\n                img={\n                  simPost.avatar ||\n                  \"https://bulma.io/images/placeholders/128x128.png\"\n                }\n                objectID={simPost._id}\n                handleCancelClick={this.handleCancelClick}\n                postType={postType}\n              />\n            );\n          })\n          .reverse()}\n      </React.Fragment>\n    );\n  }\n}\n\nconst mapStateToProps = state => {\n  return {\n    userID: state.persistedReducer.userID,\n    loggedIn: state.persistedReducer.loggedIn,\n    likedPosts: state.persistedReducer.likedPosts,\n    myPosts: state.persistedReducer.myPosts,\n    avatar: state.persistedReducer.avatar,\n    likedPostsDetail: state.persistedReducer.likedPostsDetail,\n    myPostsDetail: state.persistedReducer.myPostsDetail,\n    filterPosts: state.persistedReducer.filterPosts\n  };\n};\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    handleUpdatedLikedPosts: (updatedLikedPostsDetail, updatedLikedPosts) =>\n      dispatch({\n        type: \"USERLIKEDPOSTSUPDATED\",\n        likedPostsDetail: updatedLikedPostsDetail,\n        likedPosts: updatedLikedPosts\n      }),\n    handleUpdatedMyPosts: (updatedMyPostsDetail, updatedMyPosts) =>\n      dispatch({\n        type: \"USERMYPOSTSUPDATED\",\n        myPostsDetail: updatedMyPostsDetail,\n        myPosts: updatedMyPosts\n      }),\n    handlePostType: postType =>\n      dispatch({\n        type: \"UPDATEPOSTTYPE\",\n        postType: postType\n      })\n  };\n};\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(SimplifiedPosts);\n"]},"metadata":{},"sourceType":"module"}